using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Globalization;

namespace ConsoleApp3
{
	class Note
	{
		public string Subject { get; set; }
		public int NoteID { get; set; }
		public string Task { get; set; }
		public int Day { get; set; }
		public int Month { get; set; }
		public int Year { get; set; }

		public void NoteDetails()
		{
			Console.WriteLine("What subject will the note be for");
			Subject = Console.ReadLine();
			Console.WriteLine("Enter the number");
			NoteID = int.Parse(Console.ReadLine());
			Console.WriteLine("What is the task to be performed?");
			Task = Console.ReadLine();
			Console.WriteLine("What is the end date?");
			Console.WriteLine("Day: ");
			Day = int.Parse(Console.ReadLine());
			Console.WriteLine("Month: "); 
			Month = int.Parse(Console.ReadLine());
			Console.WriteLine("Year: ");
			Year = int.Parse(Console.ReadLine());
			
		}

		public void DisplayNote()
		{
			Console.WriteLine($"<{Subject}>\n~~~~|{NoteID}: {Task} ending at {Day}.{Month}.{Year}|~~~~");
		}

		public string FormatForFile()
		{
			return $"<{Subject}>\n~~~~|{NoteID}: {Task} ending at {Day}.{Month}.{Year}|~~~~";
		}
	}

	public class Program
	{
		static List<Note> notes = new List<Note>();
		static string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "notes.txt");

		static void Main(string[] args)
		{
			
			Console.WriteLine("Do you want to open and see the prev tasks or overwrite them?");
			string open = Console.ReadLine();
			if (open == "open")
			{
				string[] lines = File.ReadAllLines(filePath);

				foreach (string line in lines)
				{
					Console.WriteLine(line);
				}
			}
			else {
				string action;
				Console.WriteLine("Do you want to add, remove or edit note");
				action = Console.ReadLine();
				Console.WriteLine("How many notes do you want to add/remove or edit?");
				int numofadd = int.Parse(Console.ReadLine());
				for (int i = 0; i < numofadd; i++)
				{
					switch (action)
					{
						case "add":
							Note note = new Note();
							note.NoteDetails();
							notes.Add(note);
							Console.WriteLine("Note was successfully added.");
							break;
						case "remove":
							Console.WriteLine("What note do you want to remove?");
							int notenum = int.Parse(Console.ReadLine());
							Note remove = notes.Find(n => n.NoteID == notenum);
							if (remove != null)
							{
								notes.Remove(remove);
							}
							else
							{
								Console.WriteLine("There is no note with such number");
							}
							break;
						case "edit":
							Console.WriteLine("What note do you want to edit?");
							int notetoedit = int.Parse(Console.ReadLine());
							Note edit = notes.Find(n => n.NoteID == notetoedit);
							if (edit != null)
							{
								Console.WriteLine("Enter new task:");
								edit.Task = Console.ReadLine();
								Console.WriteLine("\nThe note was successfully edited.");
							}
							else
							{
								Console.WriteLine("There is no note with such number");
							}
							break;
						default:
							Console.WriteLine("The action you want to perform isn't a function for this app");
							break;
					}
				}

				Console.WriteLine("Do you want to see what notes you have?");
				string answer = Console.ReadLine();
				switch (answer)
				{
					case "yes":
						if (notes.Count > 0)
						{
							// Group notes by subject
							var groupedNotes = notes.GroupBy(n => n.Subject);

							// Display grouped notes
							foreach (var group in groupedNotes)
							{
								Console.WriteLine(group.Key);
								foreach (var note in group)
								{
									note.DisplayNote();
								}
							}

							// Save to file
							using (StreamWriter writer = new StreamWriter(filePath))
							{
								foreach (Note note in notes)
								{
									writer.WriteLine(note.FormatForFile());
								}
							}
							Console.WriteLine("Notes saved to file successfully.");
						}
						else
						{
							Console.WriteLine("No notes available.");
						}
						break;
					case "no":
						Console.WriteLine("Goodbye!");
						using (StreamWriter writer = new StreamWriter(filePath))
						{
							foreach (Note note in notes)
							{
								writer.WriteLine(note.FormatForFile());
							}
						}
						Console.WriteLine("Notes saved to file successfully.");
						break;
				}
			}

			Console.ReadKey();
		}
	}
}
